type ValidationResult = 
 variant {
   Err: ValidationError;
   Ok: ValidationResponse;
 };
type ValidationResponse = 
 record {
   owner: bool;
   tag: Hex;
   wallet: blob;
 };
type ValidationRequest = 
 record {
   access_code: AESKey;
   validation: ValidationIdentifier;
 };
type ValidationIdentifier = text;
type ValidationError = record {msg: text;};
type TransferResult = 
 variant {
   Err: TransferError;
   Ok: BlockIndex;
 };
type TransferError = 
 variant {
   BadFee: record {expected_fee: Tokens;};
   InsufficientFunds: record {balance: Tokens;};
   TxCreatedInFuture;
   TxDuplicate: record {duplicate_of: BlockIndex;};
   TxTooOld: record {allowed_window_nanos: nat64;};
 };
type Tokens = record {e8s: nat64;};
type TagUid = text;
type NewMessage = 
 record {
   location: opt Location;
   message: text;
   uid: TagUid;
 };
type LoggedMessage = 
 record {
   balance: nat64;
   from: principal;
   location: text;
   message: text;
   time: nat64;
   uid: TagUid;
 };
type Location = 
 record {
   latitude: float64;
   longitude: float64;
 };
type Hex = text;
type BlockIndex = nat64;
type AESKey = text;
service : {
  getChatLog: (TagUid, opt Location) -> (vec LoggedMessage);
  getRegistry: () -> (vec record {
                            TagUid;
                            principal;
                          }) query;
  initializeNtagle: () -> () oneway;
  isAdmin: () -> (bool);
  postMessage: (NewMessage) -> (vec LoggedMessage);
  tagBalance: (TagUid) -> (nat64);
  validateAccess: (ValidationRequest) -> (ValidationResult);
  whoami: () -> (principal);
  withdraw: (TagUid, vec nat8, nat64) -> (TransferResult);
}
